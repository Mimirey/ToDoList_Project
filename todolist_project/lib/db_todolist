import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../model/sort_option.dart';
import '../model/home_model.dart'; 

class NotesDB {
  static final NotesDB _instance = NotesDB._internal();
  factory NotesDB() => _instance;
  NotesDB._internal();

  static Database? _db;

  Future<Database> get db async {
    if (_db != null) return _db!;
    _db = await _initDb();
    return _db!;
  }

  Future<Database> _initDb() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, 'notes.db');

    return await openDatabase(
      path,
      version: 1,
      onCreate: (db, version) async {
        await db.execute('''
          CREATE TABLE notes(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            judul TEXT,
            kegiatan TEXT,
            isDone INTEGER,
            deadline TEXT,
            priority TEXT
          )
        ''');
      },
    );
  }

  Future<int> insertNote(Notes note) async {
    final client = await db;
    final result = await client.insert('notes', {
      'judul': note.judul,
      'kegiatan': note.kegiatan,
      'isDone': note.isDone ? 1 : 0,
      'deadline': note.deadline?.toIso8601String(),
      'priority': note.priority.name,
    });
    print("‚úÖ INSERTED: ${note.judul} | ID: $result");
    return result;
  }

  Future<List<Notes>> getNotes() async {
    final client = await db;
    final List<Map<String, dynamic>> maps = await client.query(
      'notes',
      orderBy: 'id DESC',
    );
    print("üì¶ FETCHED NOTES: ${maps.length}");
    return List<Notes>.generate(maps.length, (i) {
      return Notes(
        id: maps[i]['id'],
        judul: maps[i]['judul'],
        kegiatan: maps[i]['kegiatan'],
        isDone: maps[i]['isDone'] == 1,
        deadline: maps[i]['deadline'] != null
            ? DateTime.parse(maps[i]['deadline'])
            : null,
        priority: SortOption.values.firstWhere(
          (e) => e.name == maps[i]['priority'],
          orElse: () => SortOption.santai,
        ),
      );
    });
  }

  Future<int> updateNote(int id, Notes note) async {
    final client = await db;
    final rowsAffected = await client.update(
      'notes',
      {
        'judul': note.judul,
        'kegiatan': note.kegiatan,
        'isDone': note.isDone ? 1 : 0,
        'deadline': note.deadline?.toIso8601String(),
        'priority': note.priority.name,
      },
      where: 'id=?',
      whereArgs: [id],
    );
    print("‚úèÔ∏è UPDATED NOTE ID: $id | Rows affected: $rowsAffected");
    return rowsAffected;
  }

  Future<int> deleteNote(int id) async {
    final client = await db;
    final rowsAffected = await client.delete(
      'notes',
      where: 'id=?',
      whereArgs: [id],
    );
    print("üóëÔ∏è DELETED NOTE ID: $id | Rows affected: $rowsAffected");
    return rowsAffected;
  }
}